/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.0.1-dev
 * apidoc:0.11.33 http://www.apidoc.me/giannigar/football-data/0.0.1-dev/play_2_4_client
 */
package com.giogar.football.data.v0.models {

  case class Competition(
    id: Long,
    caption: String,
    league: com.giogar.football.data.v0.models.League,
    year: String,
    currentMatchday: Int,
    numberOfTeams: Int,
    numberOfGames: Int,
    lastUpdated: _root_.org.joda.time.DateTime
  )

  case class Fixture(
    date: _root_.org.joda.time.DateTime,
    status: com.giogar.football.data.v0.models.FixtureStatus,
    matchday: Int,
    homeTeamName: String,
    awayTeamName: String,
    result: com.giogar.football.data.v0.models.Result
  )

  case class Fixtures(
    fixtures: Seq[com.giogar.football.data.v0.models.Fixture]
  )

  case class LeaguePosition(
    rank: Int,
    team: String,
    teamId: Long,
    playedGames: Int,
    crestURI: _root_.scala.Option[String] = None,
    points: Int,
    goals: Int,
    goalsAgainst: Int,
    goalDifference: Int
  )

  case class LeagueTable(
    leagueCaption: String,
    matchDay: Int,
    standing: Seq[com.giogar.football.data.v0.models.LeaguePosition]
  )

  case class Player(
    name: String,
    position: String,
    jerseyNumber: Int,
    dateOfBirth: _root_.org.joda.time.LocalDate,
    nationality: String,
    contractUntil: _root_.org.joda.time.LocalDate,
    marketValue: String
  )

  case class Result(
    goalsHomeTeam: _root_.scala.Option[Int] = None,
    goalsAwayTeam: _root_.scala.Option[Int] = None,
    halfTime: _root_.scala.Option[com.giogar.football.data.v0.models.Score] = None,
    extraTime: _root_.scala.Option[com.giogar.football.data.v0.models.Score] = None,
    penaltyShootout: _root_.scala.Option[com.giogar.football.data.v0.models.Score] = None
  )

  case class Score(
    goalsHomeTeam: Int,
    goalsAwayTeam: Int
  )

  case class Team(
    name: String,
    code: _root_.scala.Option[String] = None,
    shortName: _root_.scala.Option[String] = None,
    squadMarketValue: _root_.scala.Option[String] = None,
    crestUrl: _root_.scala.Option[String] = None
  )

  case class Teams(
    teams: Seq[com.giogar.football.data.v0.models.Team]
  )

  /**
   * status of the fixture
   */
  sealed trait FixtureStatus

  object FixtureStatus {

    case object Scheduled extends FixtureStatus { override def toString = "SCHEDULED" }
    case object Timed extends FixtureStatus { override def toString = "TIMED" }
    case object Postponed extends FixtureStatus { override def toString = "POSTPONED" }
    case object Canceled extends FixtureStatus { override def toString = "CANCELED" }
    case object InPlay extends FixtureStatus { override def toString = "IN_PLAY" }
    case object Finished extends FixtureStatus { override def toString = "FINISHED" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends FixtureStatus

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Scheduled, Timed, Postponed, Canceled, InPlay, Finished)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): FixtureStatus = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[FixtureStatus] = byName.get(value.toLowerCase)

  }

  /**
   * Supported leagues
   */
  sealed trait League

  object League {

    /**
     * 1. Bundesliga
     */
    case object Bl1 extends League { override def toString = "BL1" }
    /**
     * 2. Bundesliga
     */
    case object Bl2 extends League { override def toString = "BL2" }
    /**
     * 3. Bundesliga
     */
    case object Bl3 extends League { override def toString = "BL3" }
    /**
     * Dfb-Cup
     */
    case object Dfb extends League { override def toString = "DFB" }
    /**
     * Premiere League
     */
    case object Pl extends League { override def toString = "PL" }
    /**
     * League One
     */
    case object El1 extends League { override def toString = "EL1" }
    /**
     * Championship
     */
    case object Elc extends League { override def toString = "ELC" }
    /**
     * FA-Cup
     */
    case object Fac extends League { override def toString = "FAC" }
    /**
     * Serie A
     */
    case object Sa extends League { override def toString = "SA" }
    /**
     * Serie B
     */
    case object Sb extends League { override def toString = "SB" }
    /**
     * Primera Division
     */
    case object Pd extends League { override def toString = "PD" }
    /**
     * Segunda Division
     */
    case object Sd extends League { override def toString = "SD" }
    /**
     * Copa del Rey
     */
    case object Cdr extends League { override def toString = "CDR" }
    /**
     * Ligue 1
     */
    case object Fl1 extends League { override def toString = "FL1" }
    /**
     * Ligue 2
     */
    case object Fl2 extends League { override def toString = "FL2" }
    /**
     * Eredivisie
     */
    case object Ded extends League { override def toString = "DED" }
    /**
     * Primeira Liga
     */
    case object Ppl extends League { override def toString = "PPL" }
    /**
     * Super League
     */
    case object Gsl extends League { override def toString = "GSL" }
    /**
     * Champions-League
     */
    case object Cl extends League { override def toString = "CL" }
    /**
     * UEFA-Cup
     */
    case object El extends League { override def toString = "EL" }
    /**
     * European-Cup of Nations
     */
    case object Ec extends League { override def toString = "EC" }
    /**
     * World-Cup
     */
    case object Wc extends League { override def toString = "WC" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends League

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Bl1, Bl2, Bl3, Dfb, Pl, El1, Elc, Fac, Sa, Sb, Pd, Sd, Cdr, Fl1, Fl2, Ded, Ppl, Gsl, Cl, El, Ec, Wc)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): League = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[League] = byName.get(value.toLowerCase)

  }

}

package com.giogar.football.data.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import com.giogar.football.data.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    implicit val jsonReadsFootballDataFixtureStatus = new play.api.libs.json.Reads[com.giogar.football.data.v0.models.FixtureStatus] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[com.giogar.football.data.v0.models.FixtureStatus] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(com.giogar.football.data.v0.models.FixtureStatus(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(com.giogar.football.data.v0.models.FixtureStatus(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesFootballDataFixtureStatus(obj: com.giogar.football.data.v0.models.FixtureStatus) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectFixtureStatus(obj: com.giogar.football.data.v0.models.FixtureStatus) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesFootballDataFixtureStatus: play.api.libs.json.Writes[FixtureStatus] = {
      new play.api.libs.json.Writes[com.giogar.football.data.v0.models.FixtureStatus] {
        def writes(obj: com.giogar.football.data.v0.models.FixtureStatus) = {
          jsonWritesFootballDataFixtureStatus(obj)
        }
      }
    }

    implicit val jsonReadsFootballDataLeague = new play.api.libs.json.Reads[com.giogar.football.data.v0.models.League] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[com.giogar.football.data.v0.models.League] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(com.giogar.football.data.v0.models.League(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(com.giogar.football.data.v0.models.League(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesFootballDataLeague(obj: com.giogar.football.data.v0.models.League) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectLeague(obj: com.giogar.football.data.v0.models.League) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesFootballDataLeague: play.api.libs.json.Writes[League] = {
      new play.api.libs.json.Writes[com.giogar.football.data.v0.models.League] {
        def writes(obj: com.giogar.football.data.v0.models.League) = {
          jsonWritesFootballDataLeague(obj)
        }
      }
    }

    implicit def jsonReadsFootballDataCompetition: play.api.libs.json.Reads[Competition] = {
      (
        (__ \ "id").read[Long] and
        (__ \ "caption").read[String] and
        (__ \ "league").read[com.giogar.football.data.v0.models.League] and
        (__ \ "year").read[String] and
        (__ \ "currentMatchday").read[Int] and
        (__ \ "numberOfTeams").read[Int] and
        (__ \ "numberOfGames").read[Int] and
        (__ \ "lastUpdated").read[_root_.org.joda.time.DateTime]
      )(Competition.apply _)
    }

    def jsObjectCompetition(obj: com.giogar.football.data.v0.models.Competition) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsNumber(obj.id),
        "caption" -> play.api.libs.json.JsString(obj.caption),
        "league" -> play.api.libs.json.JsString(obj.league.toString),
        "year" -> play.api.libs.json.JsString(obj.year),
        "currentMatchday" -> play.api.libs.json.JsNumber(obj.currentMatchday),
        "numberOfTeams" -> play.api.libs.json.JsNumber(obj.numberOfTeams),
        "numberOfGames" -> play.api.libs.json.JsNumber(obj.numberOfGames),
        "lastUpdated" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.lastUpdated))
      )
    }

    implicit def jsonWritesFootballDataCompetition: play.api.libs.json.Writes[Competition] = {
      new play.api.libs.json.Writes[com.giogar.football.data.v0.models.Competition] {
        def writes(obj: com.giogar.football.data.v0.models.Competition) = {
          jsObjectCompetition(obj)
        }
      }
    }

    implicit def jsonReadsFootballDataFixture: play.api.libs.json.Reads[Fixture] = {
      (
        (__ \ "date").read[_root_.org.joda.time.DateTime] and
        (__ \ "status").read[com.giogar.football.data.v0.models.FixtureStatus] and
        (__ \ "matchday").read[Int] and
        (__ \ "homeTeamName").read[String] and
        (__ \ "awayTeamName").read[String] and
        (__ \ "result").read[com.giogar.football.data.v0.models.Result]
      )(Fixture.apply _)
    }

    def jsObjectFixture(obj: com.giogar.football.data.v0.models.Fixture) = {
      play.api.libs.json.Json.obj(
        "date" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.date)),
        "status" -> play.api.libs.json.JsString(obj.status.toString),
        "matchday" -> play.api.libs.json.JsNumber(obj.matchday),
        "homeTeamName" -> play.api.libs.json.JsString(obj.homeTeamName),
        "awayTeamName" -> play.api.libs.json.JsString(obj.awayTeamName),
        "result" -> jsObjectResult(obj.result)
      )
    }

    implicit def jsonWritesFootballDataFixture: play.api.libs.json.Writes[Fixture] = {
      new play.api.libs.json.Writes[com.giogar.football.data.v0.models.Fixture] {
        def writes(obj: com.giogar.football.data.v0.models.Fixture) = {
          jsObjectFixture(obj)
        }
      }
    }

    implicit def jsonReadsFootballDataFixtures: play.api.libs.json.Reads[Fixtures] = {
      (__ \ "fixtures").read[Seq[com.giogar.football.data.v0.models.Fixture]].map { x => new Fixtures(fixtures = x) }
    }

    def jsObjectFixtures(obj: com.giogar.football.data.v0.models.Fixtures) = {
      play.api.libs.json.Json.obj(
        "fixtures" -> play.api.libs.json.Json.toJson(obj.fixtures)
      )
    }

    implicit def jsonWritesFootballDataFixtures: play.api.libs.json.Writes[Fixtures] = {
      new play.api.libs.json.Writes[com.giogar.football.data.v0.models.Fixtures] {
        def writes(obj: com.giogar.football.data.v0.models.Fixtures) = {
          jsObjectFixtures(obj)
        }
      }
    }

    implicit def jsonReadsFootballDataLeaguePosition: play.api.libs.json.Reads[LeaguePosition] = {
      (
        (__ \ "rank").read[Int] and
        (__ \ "team").read[String] and
        (__ \ "teamId").read[Long] and
        (__ \ "playedGames").read[Int] and
        (__ \ "crestURI").readNullable[String] and
        (__ \ "points").read[Int] and
        (__ \ "goals").read[Int] and
        (__ \ "goalsAgainst").read[Int] and
        (__ \ "goalDifference").read[Int]
      )(LeaguePosition.apply _)
    }

    def jsObjectLeaguePosition(obj: com.giogar.football.data.v0.models.LeaguePosition) = {
      play.api.libs.json.Json.obj(
        "rank" -> play.api.libs.json.JsNumber(obj.rank),
        "team" -> play.api.libs.json.JsString(obj.team),
        "teamId" -> play.api.libs.json.JsNumber(obj.teamId),
        "playedGames" -> play.api.libs.json.JsNumber(obj.playedGames),
        "points" -> play.api.libs.json.JsNumber(obj.points),
        "goals" -> play.api.libs.json.JsNumber(obj.goals),
        "goalsAgainst" -> play.api.libs.json.JsNumber(obj.goalsAgainst),
        "goalDifference" -> play.api.libs.json.JsNumber(obj.goalDifference)
      ) ++ (obj.crestURI match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("crestURI" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesFootballDataLeaguePosition: play.api.libs.json.Writes[LeaguePosition] = {
      new play.api.libs.json.Writes[com.giogar.football.data.v0.models.LeaguePosition] {
        def writes(obj: com.giogar.football.data.v0.models.LeaguePosition) = {
          jsObjectLeaguePosition(obj)
        }
      }
    }

    implicit def jsonReadsFootballDataLeagueTable: play.api.libs.json.Reads[LeagueTable] = {
      (
        (__ \ "leagueCaption").read[String] and
        (__ \ "matchDay").read[Int] and
        (__ \ "standing").read[Seq[com.giogar.football.data.v0.models.LeaguePosition]]
      )(LeagueTable.apply _)
    }

    def jsObjectLeagueTable(obj: com.giogar.football.data.v0.models.LeagueTable) = {
      play.api.libs.json.Json.obj(
        "leagueCaption" -> play.api.libs.json.JsString(obj.leagueCaption),
        "matchDay" -> play.api.libs.json.JsNumber(obj.matchDay),
        "standing" -> play.api.libs.json.Json.toJson(obj.standing)
      )
    }

    implicit def jsonWritesFootballDataLeagueTable: play.api.libs.json.Writes[LeagueTable] = {
      new play.api.libs.json.Writes[com.giogar.football.data.v0.models.LeagueTable] {
        def writes(obj: com.giogar.football.data.v0.models.LeagueTable) = {
          jsObjectLeagueTable(obj)
        }
      }
    }

    implicit def jsonReadsFootballDataPlayer: play.api.libs.json.Reads[Player] = {
      (
        (__ \ "name").read[String] and
        (__ \ "position").read[String] and
        (__ \ "jerseyNumber").read[Int] and
        (__ \ "dateOfBirth").read[_root_.org.joda.time.LocalDate] and
        (__ \ "nationality").read[String] and
        (__ \ "contractUntil").read[_root_.org.joda.time.LocalDate] and
        (__ \ "marketValue").read[String]
      )(Player.apply _)
    }

    def jsObjectPlayer(obj: com.giogar.football.data.v0.models.Player) = {
      play.api.libs.json.Json.obj(
        "name" -> play.api.libs.json.JsString(obj.name),
        "position" -> play.api.libs.json.JsString(obj.position),
        "jerseyNumber" -> play.api.libs.json.JsNumber(obj.jerseyNumber),
        "dateOfBirth" -> play.api.libs.json.JsString(obj.dateOfBirth.toString),
        "nationality" -> play.api.libs.json.JsString(obj.nationality),
        "contractUntil" -> play.api.libs.json.JsString(obj.contractUntil.toString),
        "marketValue" -> play.api.libs.json.JsString(obj.marketValue)
      )
    }

    implicit def jsonWritesFootballDataPlayer: play.api.libs.json.Writes[Player] = {
      new play.api.libs.json.Writes[com.giogar.football.data.v0.models.Player] {
        def writes(obj: com.giogar.football.data.v0.models.Player) = {
          jsObjectPlayer(obj)
        }
      }
    }

    implicit def jsonReadsFootballDataResult: play.api.libs.json.Reads[Result] = {
      (
        (__ \ "goalsHomeTeam").readNullable[Int] and
        (__ \ "goalsAwayTeam").readNullable[Int] and
        (__ \ "halfTime").readNullable[com.giogar.football.data.v0.models.Score] and
        (__ \ "extraTime").readNullable[com.giogar.football.data.v0.models.Score] and
        (__ \ "penaltyShootout").readNullable[com.giogar.football.data.v0.models.Score]
      )(Result.apply _)
    }

    def jsObjectResult(obj: com.giogar.football.data.v0.models.Result) = {
      (obj.goalsHomeTeam match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("goalsHomeTeam" -> play.api.libs.json.JsNumber(x))
      }) ++
      (obj.goalsAwayTeam match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("goalsAwayTeam" -> play.api.libs.json.JsNumber(x))
      }) ++
      (obj.halfTime match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("halfTime" -> jsObjectScore(x))
      }) ++
      (obj.extraTime match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("extraTime" -> jsObjectScore(x))
      }) ++
      (obj.penaltyShootout match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("penaltyShootout" -> jsObjectScore(x))
      })
    }

    implicit def jsonWritesFootballDataResult: play.api.libs.json.Writes[Result] = {
      new play.api.libs.json.Writes[com.giogar.football.data.v0.models.Result] {
        def writes(obj: com.giogar.football.data.v0.models.Result) = {
          jsObjectResult(obj)
        }
      }
    }

    implicit def jsonReadsFootballDataScore: play.api.libs.json.Reads[Score] = {
      (
        (__ \ "goalsHomeTeam").read[Int] and
        (__ \ "goalsAwayTeam").read[Int]
      )(Score.apply _)
    }

    def jsObjectScore(obj: com.giogar.football.data.v0.models.Score) = {
      play.api.libs.json.Json.obj(
        "goalsHomeTeam" -> play.api.libs.json.JsNumber(obj.goalsHomeTeam),
        "goalsAwayTeam" -> play.api.libs.json.JsNumber(obj.goalsAwayTeam)
      )
    }

    implicit def jsonWritesFootballDataScore: play.api.libs.json.Writes[Score] = {
      new play.api.libs.json.Writes[com.giogar.football.data.v0.models.Score] {
        def writes(obj: com.giogar.football.data.v0.models.Score) = {
          jsObjectScore(obj)
        }
      }
    }

    implicit def jsonReadsFootballDataTeam: play.api.libs.json.Reads[Team] = {
      (
        (__ \ "name").read[String] and
        (__ \ "code").readNullable[String] and
        (__ \ "shortName").readNullable[String] and
        (__ \ "squadMarketValue").readNullable[String] and
        (__ \ "crestUrl").readNullable[String]
      )(Team.apply _)
    }

    def jsObjectTeam(obj: com.giogar.football.data.v0.models.Team) = {
      play.api.libs.json.Json.obj(
        "name" -> play.api.libs.json.JsString(obj.name)
      ) ++ (obj.code match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("code" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.shortName match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("shortName" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.squadMarketValue match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("squadMarketValue" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.crestUrl match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("crestUrl" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesFootballDataTeam: play.api.libs.json.Writes[Team] = {
      new play.api.libs.json.Writes[com.giogar.football.data.v0.models.Team] {
        def writes(obj: com.giogar.football.data.v0.models.Team) = {
          jsObjectTeam(obj)
        }
      }
    }

    implicit def jsonReadsFootballDataTeams: play.api.libs.json.Reads[Teams] = {
      (__ \ "teams").read[Seq[com.giogar.football.data.v0.models.Team]].map { x => new Teams(teams = x) }
    }

    def jsObjectTeams(obj: com.giogar.football.data.v0.models.Teams) = {
      play.api.libs.json.Json.obj(
        "teams" -> play.api.libs.json.Json.toJson(obj.teams)
      )
    }

    implicit def jsonWritesFootballDataTeams: play.api.libs.json.Writes[Teams] = {
      new play.api.libs.json.Writes[com.giogar.football.data.v0.models.Teams] {
        def writes(obj: com.giogar.football.data.v0.models.Teams) = {
          jsObjectTeams(obj)
        }
      }
    }
  }
}

package com.giogar.football.data.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}
    import org.joda.time.{DateTime, LocalDate}
    import org.joda.time.format.ISODateTimeFormat
    import com.giogar.football.data.v0.models._

    // Type: date-time-iso8601
    implicit val pathBindableTypeDateTimeIso8601 = new PathBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    implicit val queryStringBindableTypeDateTimeIso8601 = new QueryStringBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    // Type: date-iso8601
    implicit val pathBindableTypeDateIso8601 = new PathBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    implicit val queryStringBindableTypeDateIso8601 = new QueryStringBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    // Enum: FixtureStatus
    private[this] val enumFixtureStatusNotFound = (key: String, e: _root_.java.lang.Exception) => s"Unrecognized $key, should be one of ${com.giogar.football.data.v0.models.FixtureStatus.all.mkString(", ")}"

    implicit val pathBindableEnumFixtureStatus = new PathBindable.Parsing[com.giogar.football.data.v0.models.FixtureStatus] (
      FixtureStatus.fromString(_).get, _.toString, enumFixtureStatusNotFound
    )

    implicit val queryStringBindableEnumFixtureStatus = new QueryStringBindable.Parsing[com.giogar.football.data.v0.models.FixtureStatus](
      FixtureStatus.fromString(_).get, _.toString, enumFixtureStatusNotFound
    )

    // Enum: League
    private[this] val enumLeagueNotFound = (key: String, e: _root_.java.lang.Exception) => s"Unrecognized $key, should be one of ${com.giogar.football.data.v0.models.League.all.mkString(", ")}"

    implicit val pathBindableEnumLeague = new PathBindable.Parsing[com.giogar.football.data.v0.models.League] (
      League.fromString(_).get, _.toString, enumLeagueNotFound
    )

    implicit val queryStringBindableEnumLeague = new QueryStringBindable.Parsing[com.giogar.football.data.v0.models.League](
      League.fromString(_).get, _.toString, enumLeagueNotFound
    )

  }

}


package com.giogar.football.data.v0 {

  object Constants {

    val BaseUrl = "http://api.football-data.org/v1"
    val Namespace = "com.giogar.football.data.v0"
    val UserAgent = "apidoc:0.11.33 http://www.apidoc.me/giannigar/football-data/0.0.1-dev/play_2_4_client"
    val Version = "0.0.1-dev"
    val VersionMajor = 0

  }

  class Client(
    val baseUrl: String = "http://api.football-data.org/v1",
    auth: scala.Option[com.giogar.football.data.v0.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil
  ) extends interfaces.Client {
    import com.giogar.football.data.v0.models.json._

    private[this] val logger = play.api.Logger("com.giogar.football.data.v0.Client")

    logger.info(s"Initializing com.giogar.football.data.v0.Client for url $baseUrl")

    def competitions: Competitions = Competitions

    def teams: Teams = Teams

    object Competitions extends Competitions {
      override def get(
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.giogar.football.data.v0.models.Competition]] = {
        _executeRequest("GET", s"/competitions", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.com.giogar.football.data.v0.Client.parseJson("Seq[com.giogar.football.data.v0.models.Competition]", r, _.validate[Seq[com.giogar.football.data.v0.models.Competition]])
          case r => throw new com.giogar.football.data.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getTeamsByCompetitionId(
        competitionId: Long,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.giogar.football.data.v0.models.Teams] = {
        _executeRequest("GET", s"/competitions/${competitionId}/teams", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.com.giogar.football.data.v0.Client.parseJson("com.giogar.football.data.v0.models.Teams", r, _.validate[com.giogar.football.data.v0.models.Teams])
          case r => throw new com.giogar.football.data.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getFixturesByCompetitionId(
        competitionId: Long,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.giogar.football.data.v0.models.Fixtures] = {
        _executeRequest("GET", s"/competitions/${competitionId}/fixtures", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.com.giogar.football.data.v0.Client.parseJson("com.giogar.football.data.v0.models.Fixtures", r, _.validate[com.giogar.football.data.v0.models.Fixtures])
          case r => throw new com.giogar.football.data.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getLeagueTableByCompetitionId(
        competitionId: Long,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.giogar.football.data.v0.models.LeagueTable] = {
        _executeRequest("GET", s"/competitions/${competitionId}/leagueTable", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.com.giogar.football.data.v0.Client.parseJson("com.giogar.football.data.v0.models.LeagueTable", r, _.validate[com.giogar.football.data.v0.models.LeagueTable])
          case r => throw new com.giogar.football.data.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    object Teams extends Teams {
      override def getByTeamId(
        teamId: Long,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.giogar.football.data.v0.models.Team] = {
        _executeRequest("GET", s"/teams/${teamId}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.com.giogar.football.data.v0.Client.parseJson("com.giogar.football.data.v0.models.Team", r, _.validate[com.giogar.football.data.v0.models.Team])
          case r => throw new com.giogar.football.data.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getFixturesByTeamId(
        teamId: Long,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.giogar.football.data.v0.models.Fixtures]] = {
        _executeRequest("GET", s"/teams/${teamId}/fixtures", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.com.giogar.football.data.v0.Client.parseJson("Seq[com.giogar.football.data.v0.models.Fixtures]", r, _.validate[Seq[com.giogar.football.data.v0.models.Fixtures]])
          case r => throw new com.giogar.football.data.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getPlayersByTeamId(
        teamId: Long,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.giogar.football.data.v0.models.Player]] = {
        _executeRequest("GET", s"/teams/${teamId}/players", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.com.giogar.football.data.v0.Client.parseJson("Seq[com.giogar.football.data.v0.models.Player]", r, _.validate[Seq[com.giogar.football.data.v0.models.Player]])
          case r => throw new com.giogar.football.data.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    def _requestHolder(path: String): play.api.libs.ws.WSRequest = {
      import play.api.Play.current

      val holder = play.api.libs.ws.WS.url(baseUrl + path).withHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version,
        "X-Apidoc-Version-Major" -> Constants.VersionMajor.toString
      ).withHeaders(defaultHeaders : _*)
      auth.fold(holder) {
        case Authorization.Basic(username, password) => {
          holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequest)(implicit ec: scala.concurrent.ExecutionContext): play.api.libs.ws.WSRequest = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield s"$name=$value"
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method $url")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' $url")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Nil,
      requestHeaders: Seq[(String, String)] = Nil,
      body: Option[play.api.libs.json.JsValue] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      method.toUpperCase match {
        case "GET" => {
          _logRequest("GET", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).get()
        }
        case "POST" => {
          _logRequest("POST", _requestHolder(path).withHeaders(_withJsonContentType(requestHeaders):_*).withQueryString(queryParameters:_*)).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          _logRequest("PUT", _requestHolder(path).withHeaders(_withJsonContentType(requestHeaders):_*).withQueryString(queryParameters:_*)).put(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PATCH" => {
          _logRequest("PATCH", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).patch(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "DELETE" => {
          _logRequest("DELETE", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).delete()
        }
         case "HEAD" => {
          _logRequest("HEAD", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).head()
        }
         case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).options()
        }
        case _ => {
          _logRequest(method, _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*))
          sys.error("Unsupported method[%s]".format(method))
        }
      }
    }

    /**
     * Adds a Content-Type: application/json header unless the specified requestHeaders
     * already contain a Content-Type header
     */
    def _withJsonContentType(headers: Seq[(String, String)]): Seq[(String, String)] = {
      headers.find { _._1.toUpperCase == "CONTENT-TYPE" } match {
        case None => headers ++ Seq(("Content-Type" -> "application/json; charset=UTF-8"))
        case Some(_) => headers
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw new com.giogar.football.data.v0.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization
  object Authorization {
    case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  package interfaces {

    trait Client {
      def baseUrl: String
      def competitions: com.giogar.football.data.v0.Competitions
      def teams: com.giogar.football.data.v0.Teams
    }

  }

  trait Competitions {
    def get(
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.giogar.football.data.v0.models.Competition]]

    def getTeamsByCompetitionId(
      competitionId: Long,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.giogar.football.data.v0.models.Teams]

    def getFixturesByCompetitionId(
      competitionId: Long,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.giogar.football.data.v0.models.Fixtures]

    def getLeagueTableByCompetitionId(
      competitionId: Long,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.giogar.football.data.v0.models.LeagueTable]
  }

  trait Teams {
    def getByTeamId(
      teamId: Long,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.giogar.football.data.v0.models.Team]

    def getFixturesByTeamId(
      teamId: Long,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.giogar.football.data.v0.models.Fixtures]]

    def getPlayersByTeamId(
      teamId: Long,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.giogar.football.data.v0.models.Player]]
  }

  package errors {

    case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends _root_.java.lang.Exception(s"HTTP $responseCode: $message")

  }

}