/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.0.1-dev
 * apidoc:0.11.33 http://www.apidoc.me/giannigar/football-data/0.0.1-dev/play_2_4_client
 */
package com.giogar.football.data.v0.models {

  case class Competition(
    id: Long,
    caption: String,
    league: com.giogar.football.data.v0.models.League,
    year: String,
    currentMatchday: Int,
    numberOfTeams: Int,
    numberOfGames: Int,
    lastUpdated: _root_.org.joda.time.DateTime
  )

  /**
   * Supported leagues
   */
  sealed trait League

  object League {

    /**
     * 1. Bundesliga
     */
    case object Bl1 extends League { override def toString = "BL1" }
    /**
     * 2. Bundesliga
     */
    case object Bl2 extends League { override def toString = "BL2" }
    /**
     * 3. Bundesliga
     */
    case object Bl3 extends League { override def toString = "BL3" }
    /**
     * Dfb-Cup
     */
    case object Dfb extends League { override def toString = "DFB" }
    /**
     * Premiere League
     */
    case object Pl extends League { override def toString = "PL" }
    /**
     * League One
     */
    case object El1 extends League { override def toString = "EL1" }
    /**
     * Championship
     */
    case object Elc extends League { override def toString = "ELC" }
    /**
     * FA-Cup
     */
    case object Fac extends League { override def toString = "FAC" }
    /**
     * Serie A
     */
    case object Sa extends League { override def toString = "SA" }
    /**
     * Serie B
     */
    case object Sb extends League { override def toString = "SB" }
    /**
     * Primera Division
     */
    case object Pd extends League { override def toString = "PD" }
    /**
     * Segunda Division
     */
    case object Sd extends League { override def toString = "SD" }
    /**
     * Copa del Rey
     */
    case object Cdr extends League { override def toString = "CDR" }
    /**
     * Ligue 1
     */
    case object Fl1 extends League { override def toString = "FL1" }
    /**
     * Ligue 2
     */
    case object Fl2 extends League { override def toString = "FL2" }
    /**
     * Eredivisie
     */
    case object Ded extends League { override def toString = "DED" }
    /**
     * Primeira Liga
     */
    case object Ppl extends League { override def toString = "PPL" }
    /**
     * Super League
     */
    case object Gsl extends League { override def toString = "GSL" }
    /**
     * Champions-League
     */
    case object Cl extends League { override def toString = "CL" }
    /**
     * UEFA-Cup
     */
    case object El extends League { override def toString = "EL" }
    /**
     * European-Cup of Nations
     */
    case object Ec extends League { override def toString = "EC" }
    /**
     * World-Cup
     */
    case object Wc extends League { override def toString = "WC" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends League

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Bl1, Bl2, Bl3, Dfb, Pl, El1, Elc, Fac, Sa, Sb, Pd, Sd, Cdr, Fl1, Fl2, Ded, Ppl, Gsl, Cl, El, Ec, Wc)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): League = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[League] = byName.get(value.toLowerCase)

  }

}

package com.giogar.football.data.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import com.giogar.football.data.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    implicit val jsonReadsFootballDataLeague = new play.api.libs.json.Reads[com.giogar.football.data.v0.models.League] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[com.giogar.football.data.v0.models.League] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(com.giogar.football.data.v0.models.League(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(com.giogar.football.data.v0.models.League(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesFootballDataLeague(obj: com.giogar.football.data.v0.models.League) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectLeague(obj: com.giogar.football.data.v0.models.League) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesFootballDataLeague: play.api.libs.json.Writes[League] = {
      new play.api.libs.json.Writes[com.giogar.football.data.v0.models.League] {
        def writes(obj: com.giogar.football.data.v0.models.League) = {
          jsonWritesFootballDataLeague(obj)
        }
      }
    }

    implicit def jsonReadsFootballDataCompetition: play.api.libs.json.Reads[Competition] = {
      (
        (__ \ "id").read[Long] and
        (__ \ "caption").read[String] and
        (__ \ "league").read[com.giogar.football.data.v0.models.League] and
        (__ \ "year").read[String] and
        (__ \ "currentMatchday").read[Int] and
        (__ \ "numberOfTeams").read[Int] and
        (__ \ "numberOfGames").read[Int] and
        (__ \ "lastUpdated").read[_root_.org.joda.time.DateTime]
      )(Competition.apply _)
    }

    def jsObjectCompetition(obj: com.giogar.football.data.v0.models.Competition) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsNumber(obj.id),
        "caption" -> play.api.libs.json.JsString(obj.caption),
        "league" -> play.api.libs.json.JsString(obj.league.toString),
        "year" -> play.api.libs.json.JsString(obj.year),
        "currentMatchday" -> play.api.libs.json.JsNumber(obj.currentMatchday),
        "numberOfTeams" -> play.api.libs.json.JsNumber(obj.numberOfTeams),
        "numberOfGames" -> play.api.libs.json.JsNumber(obj.numberOfGames),
        "lastUpdated" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.lastUpdated))
      )
    }

    implicit def jsonWritesFootballDataCompetition: play.api.libs.json.Writes[Competition] = {
      new play.api.libs.json.Writes[com.giogar.football.data.v0.models.Competition] {
        def writes(obj: com.giogar.football.data.v0.models.Competition) = {
          jsObjectCompetition(obj)
        }
      }
    }
  }
}

package com.giogar.football.data.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}
    import org.joda.time.{DateTime, LocalDate}
    import org.joda.time.format.ISODateTimeFormat
    import com.giogar.football.data.v0.models._

    // Type: date-time-iso8601
    implicit val pathBindableTypeDateTimeIso8601 = new PathBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    implicit val queryStringBindableTypeDateTimeIso8601 = new QueryStringBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    // Type: date-iso8601
    implicit val pathBindableTypeDateIso8601 = new PathBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    implicit val queryStringBindableTypeDateIso8601 = new QueryStringBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    // Enum: League
    private[this] val enumLeagueNotFound = (key: String, e: _root_.java.lang.Exception) => s"Unrecognized $key, should be one of ${com.giogar.football.data.v0.models.League.all.mkString(", ")}"

    implicit val pathBindableEnumLeague = new PathBindable.Parsing[com.giogar.football.data.v0.models.League] (
      League.fromString(_).get, _.toString, enumLeagueNotFound
    )

    implicit val queryStringBindableEnumLeague = new QueryStringBindable.Parsing[com.giogar.football.data.v0.models.League](
      League.fromString(_).get, _.toString, enumLeagueNotFound
    )

  }

}


package com.giogar.football.data.v0 {

  object Constants {

    val BaseUrl = "http://api.football-data.org/v1"
    val Namespace = "com.giogar.football.data.v0"
    val UserAgent = "apidoc:0.11.33 http://www.apidoc.me/giannigar/football-data/0.0.1-dev/play_2_4_client"
    val Version = "0.0.1-dev"
    val VersionMajor = 0

  }

  class Client(
    val baseUrl: String = "http://api.football-data.org/v1",
    auth: scala.Option[com.giogar.football.data.v0.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil
  ) extends interfaces.Client {
    import com.giogar.football.data.v0.models.json._

    private[this] val logger = play.api.Logger("com.giogar.football.data.v0.Client")

    logger.info(s"Initializing com.giogar.football.data.v0.Client for url $baseUrl")

    def competitions: Competitions = Competitions

    object Competitions extends Competitions {
      override def get(
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.giogar.football.data.v0.models.Competition]] = {
        _executeRequest("GET", s"/competitions", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.com.giogar.football.data.v0.Client.parseJson("Seq[com.giogar.football.data.v0.models.Competition]", r, _.validate[Seq[com.giogar.football.data.v0.models.Competition]])
          case r => throw new com.giogar.football.data.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    def _requestHolder(path: String): play.api.libs.ws.WSRequest = {
      import play.api.Play.current

      val holder = play.api.libs.ws.WS.url(baseUrl + path).withHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version,
        "X-Apidoc-Version-Major" -> Constants.VersionMajor.toString
      ).withHeaders(defaultHeaders : _*)
      auth.fold(holder) {
        case Authorization.Basic(username, password) => {
          holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequest)(implicit ec: scala.concurrent.ExecutionContext): play.api.libs.ws.WSRequest = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield s"$name=$value"
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method $url")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' $url")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Nil,
      requestHeaders: Seq[(String, String)] = Nil,
      body: Option[play.api.libs.json.JsValue] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      method.toUpperCase match {
        case "GET" => {
          _logRequest("GET", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).get()
        }
        case "POST" => {
          _logRequest("POST", _requestHolder(path).withHeaders(_withJsonContentType(requestHeaders):_*).withQueryString(queryParameters:_*)).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          _logRequest("PUT", _requestHolder(path).withHeaders(_withJsonContentType(requestHeaders):_*).withQueryString(queryParameters:_*)).put(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PATCH" => {
          _logRequest("PATCH", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).patch(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "DELETE" => {
          _logRequest("DELETE", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).delete()
        }
         case "HEAD" => {
          _logRequest("HEAD", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).head()
        }
         case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).options()
        }
        case _ => {
          _logRequest(method, _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*))
          sys.error("Unsupported method[%s]".format(method))
        }
      }
    }

    /**
     * Adds a Content-Type: application/json header unless the specified requestHeaders
     * already contain a Content-Type header
     */
    def _withJsonContentType(headers: Seq[(String, String)]): Seq[(String, String)] = {
      headers.find { _._1.toUpperCase == "CONTENT-TYPE" } match {
        case None => headers ++ Seq(("Content-Type" -> "application/json; charset=UTF-8"))
        case Some(_) => headers
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw new com.giogar.football.data.v0.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization
  object Authorization {
    case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  package interfaces {

    trait Client {
      def baseUrl: String
      def competitions: com.giogar.football.data.v0.Competitions
    }

  }

  trait Competitions {
    def get(
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.giogar.football.data.v0.models.Competition]]
  }

  package errors {

    case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends _root_.java.lang.Exception(s"HTTP $responseCode: $message")

  }

}